#!/usr/bin/env python
# coding=utf-8
# Copyright 2017 The Nizza Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This is the main training script for nizza models."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from nizza.utils import nizza_utils
from nizza import registry

import tensorflow as tf
from tensorflow.contrib.learn import learn_runner


flags = tf.flags
FLAGS = flags.FLAGS

# Training flags
# See utils/nizza_utils.py for additional command-line flags.
flags.DEFINE_integer("keep_checkpoint_max", 10,
                     "How many recent checkpoints to keep.")
flags.DEFINE_integer("max_length", 120,
                     "Maximum sentence length in training.")
flags.DEFINE_integer("train_steps", 250000,
                     "The number of steps to run training for.")
flags.DEFINE_integer("save_checkpoints_steps", 500,
                     "Save checkpoints each n steps.")
flags.DEFINE_string("data_prefix", "", "Prefix to train and eval data. We "
                    "train on data_prefix-train* and evaluate on "
                    "data_prefix-dev*. Both should contain serialized "
                    "TFRecords as created by T2T's data generators.")
flags.DEFINE_integer("min_eval_frequency", 2000,
                     "Run evaluation every this steps during training.")
flags.DEFINE_integer("batch_size", 64,
                     "Run evaluation every this steps during training.")
flags.DEFINE_float("learning_rate", 0.002,
                   "Adam learning rate.")
flags.DEFINE_bool("registry_help", False, "Print registry and die.")


def _extend_hparams(hparams):
  hparams.add_hparam("train_steps", FLAGS.train_steps) 
  hparams.add_hparam("learning_rate", FLAGS.learning_rate) 
  hparams.add_hparam("min_eval_frequency", FLAGS.min_eval_frequency) 
  return hparams


def _extend_run_config(run_config):
  run_config = run_config.replace(
      save_checkpoints_steps=FLAGS.save_checkpoints_steps)
  return run_config


def experiment_fn(run_config, params):
    """Create an experiment to train and evaluate the model.

    Args:
        run_config (RunConfig): Runtime configuration 
        params (HParam): Hyperparameters
    Returns:
        (Experiment) Experiment for training the model.
    """
    model = registry.get_registered_model(FLAGS.model, params, run_config)
    
    train_input_fn = lambda: nizza_utils.build_input_fn(
        "%s-train*" % FLAGS.data_prefix,
        batch_size=FLAGS.batch_size,
        shuffle=True,
        max_length=FLAGS.max_length,
        repeat_count=None)
    eval_input_fn = lambda: nizza_utils.build_input_fn(
        "%s-dev*" % FLAGS.data_prefix)

    experiment = tf.contrib.learn.Experiment(
        estimator=model,
        train_input_fn=train_input_fn,
        eval_input_fn=eval_input_fn,
        train_steps=params.train_steps,
        min_eval_frequency=params.min_eval_frequency,
        train_monitors=[],
        eval_hooks=[],
        eval_steps=None
    )
    return experiment


def main(_):
  tf.logging.set_verbosity(tf.logging.INFO)
  if FLAGS.registry_help:
    registry.print_registry()
    return
  try:
    hparams = nizza_utils.get_hparams()
    run_config = nizza_utils.get_run_config()
    hparams = _extend_hparams(hparams)
    run_config = _extend_run_config(run_config)
    learn_runner.run(
        experiment_fn=experiment_fn,
        run_config=run_config,
        schedule="train_and_evaluate",
        hparams=hparams
    )
  except ValueError as e:
    tf.logging.fatal("A fatal error occurred, probably due to an error "
                     "in the configuration: %s" % e)


if __name__ == "__main__":
  tf.app.run()
